/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ManufacturerWarehouseRole;

import userinterface.SupplierRole.*;
import userinterface.StaffRole.*;
import userinterface.CustomerRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ManufacturerEnterprise;
import Business.Organization.*;
import Business.RawMaterial.*;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.*;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ManufacturerWarehouseJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private ManufacturerWarehouseOrganization organization;
    private ManufacturerEnterprise enterprise;
    private UserAccount userAccount;
    private RawMaterialDirectory rmDirectory;
    public static boolean flagman = false;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private EcoSystem business;
    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    public ManufacturerWarehouseJPanel(JPanel userProcessContainer, UserAccount account, ManufacturerWarehouseOrganization organization, Enterprise enterprise,EcoSystem business, RawMaterialDirectory rmDirectiry) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = (ManufacturerEnterprise)enterprise;
        this.userAccount = account;
        this.business = business;
        this.rmDirectory = rmDirectiry;
        valueLabel.setText(enterprise.getName());
        populateSuppRequestTable();
        populateRM();
        
    }


    public void populateSuppRequestTable(){
    DefaultTableModel model = (DefaultTableModel)workRequestRMJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = request.getRawMaterialQty();
            
            model.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestRMJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        processJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        rmJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel.setText("Enterprise :");

        valueLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        refreshJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        workRequestRMJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        workRequestRMJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Raw Material Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestRMJTable);
        if (workRequestRMJTable.getColumnModel().getColumnCount() > 0) {
            workRequestRMJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestRMJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestRMJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestRMJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestRMJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Raw Material Requests");

        processJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        rmJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rmJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Raw Material", "Quantity", "Producer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(rmJTable);
        if (rmJTable.getColumnModel().getColumnCount() > 0) {
            rmJTable.getColumnModel().getColumn(0).setResizable(false);
            rmJTable.getColumnModel().getColumn(1).setResizable(false);
            rmJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Raw Material Inventory");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Manufacturer Warehouse");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(assignJButton)
                            .addGap(189, 189, 189)
                            .addComponent(refreshJButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 177, Short.MAX_VALUE)
                            .addComponent(processJButton))
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(337, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(340, 340, 340))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enterpriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(76, 76, 76)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processJButton)
                    .addComponent(refreshJButton)
                    .addComponent(assignJButton))
                .addGap(90, 90, 90)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateSuppRequestTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void sendToSupplierJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendToSupplierJButtonActionPerformed
        int selectedRow = workRequestRMJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        ProduceRequest request = (ProduceRequest)workRequestRMJTable.getValueAt(selectedRow, 0);
        request.setStatus("sent to Manufacturer.Supplier ");
        populateSuppRequestTable();
        userAccount.getWorkQueue().getWorkRequestList().add(request);
        
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
            if (organization instanceof ManufacturerSupplierOrganization){
                org = organization;
                break;
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
        }
        
    }//GEN-LAST:event_sendToSupplierJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestRMJTable.getSelectedRow();

        if (selectedRow < 0){
            return;
        }

        ProduceRequest request = (ProduceRequest)workRequestRMJTable.getValueAt(selectedRow, 0);

        request.setStatus("Processing");

        ProcessRequestRMJPanel processWorkRequestJPanel = new ProcessRequestRMJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessRequestRMJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
 
        int selectedRow = workRequestRMJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row before proceeding");
        }
        String rawMaterialName = workRequestRMJTable.getModel().getValueAt(selectedRow, 0).toString();
        int rawMaterialQty = Integer.parseInt((String.valueOf(workRequestRMJTable.getModel().getValueAt(selectedRow, 4))));
        
        int i =0;
         int rawMaterialQntyProduce = 0;
         String tempName = null;
         
         for(int j = 0; j <rmJTable.getRowCount(); j++){
             tempName = rmJTable.getModel().getValueAt(j, i).toString();
             System.out.println(tempName);
            if(tempName.equals(rawMaterialName)){
                i++;
               
                rawMaterialQntyProduce = Integer.parseInt((String.valueOf(rmJTable.getModel().getValueAt(j, i))));
                break;
            }
        }
         if (tempName == null)
         {
             JOptionPane.showMessageDialog(null,"Cannot assign this job, please go producer");
             processJButton.setEnabled(false);
             flagman = true;
         }
         else{
         if (tempName.equals(rawMaterialName))
            {
                if (rawMaterialQty <= rawMaterialQntyProduce)
                    {
                        WorkRequest request = (WorkRequest)workRequestRMJTable.getValueAt(selectedRow, 0);
                        request.setReceiver(userAccount);
                        request.setStatus("Pending");
            
                        for(RawMaterial rawMaterial : rmDirectory.getRawMaterial()){
                            if (tempName.equals((String)rawMaterial.getMaterialName()))
                            {
                                rawMaterial.setMaterialQuantity(rawMaterialQntyProduce - rawMaterialQty);
                                request.setRawMaterialQty(0);
                            }
                            
                            populateSuppRequestTable();
                            populateRM();       
                        }  
 
                    }
                else if (rawMaterialQty > rawMaterialQntyProduce)
                {
                    WorkRequest request = (WorkRequest)workRequestRMJTable.getValueAt(selectedRow, 0);
                    request.setReceiver(userAccount);
                    request.setStatus("Pending");
                    request.setCropQty(rawMaterialQty - rawMaterialQntyProduce);
                    
                    for(RawMaterial rawMaterial : rmDirectory.getRawMaterial()){
                    if (tempName.equals((String)rawMaterial.getMaterialName()))
                    {
                        rawMaterial.setMaterialQuantity(0);
                        request.setRawMaterialQty(rawMaterialQty - rawMaterialQntyProduce);
                        flagman = true;
                    }
                    populateSuppRequestTable();
                    populateRM();
                    }  
                }
            
            }
        else 
        {
            JOptionPane.showMessageDialog(null,"Cannot assign this job, please go farmer");
            flagman = true;
        }
         /*if (tempName.equals(rawMaterialName) && rawMaterialQty <= rawMaterialQntyProduce)
        {
            
              WorkRequest request = (WorkRequest)workRequestRMJTable.getValueAt(selectedRow, 0);
              request.setReceiver(userAccount);
              request.setStatus("Pending");
              populateSuppRequestTable();
        }
        else 
        {
            JOptionPane.showMessageDialog(null,"Cannot assign");
        }*/
                    
         }
       

    }//GEN-LAST:event_assignJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable rmJTable;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestRMJTable;
    // End of variables declaration//GEN-END:variables

    private void populateRM() {
        DefaultTableModel model = (DefaultTableModel)rmJTable.getModel();
        
        model.setRowCount(0);
        
        for(RawMaterial rm : rmDirectory.getRawMaterial()){
            Object[] row = new Object[5];
            row[0] = rm;
            row[1] = rm.getMaterialQuantity();
            row[2] = rm.getProducerName();
            //row[3] = userAccount.getUsername();
            
            
            model.addRow(row);
        }
    }
}
