/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FarmerRole;

import Business.EcoSystem;

import Business.Enterprise.Enterprise;
import Business.Enterprise.USFDEnterprise;
import Business.Produce.Produce;
import Business.Organization.FarmerOrganization;
import Business.Organization.Organization;
import Business.Organization.StaffOrganization;
import Business.Produce.ProduceDirectory;
import Business.RawMaterialReview.RawMaterialReview;
import Business.RawMaterialReview.RawMaterialReviewDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ProduceRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class FarmerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private FarmerOrganization farmerOrganization;
    private USFDEnterprise enterprise;
    private ProduceDirectory produceDirectory;
    private RawMaterialReviewDirectory rmrDirectory;
    private ButtonGroup qualitybg = new ButtonGroup();
    private ButtonGroup shelfbg = new ButtonGroup();
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */

    public FarmerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization,Enterprise enterprise ,EcoSystem business,ProduceDirectory produceDirectory,RawMaterialReviewDirectory rmrDirectory) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.farmerOrganization = (FarmerOrganization)organization;
        this.enterprise = (USFDEnterprise)enterprise;
        this.produceDirectory = produceDirectory;
        this.rmrDirectory = rmrDirectory;
        System.out.println("farmer panel produce directory"+ produceDirectory);
        populateTable();
        populateRequestRMTable();
        populateCropTable();
        populatermCombo();
         qualitygroupbutton();
         shelfgroupbutton();
        
  
    }
     private void qualitygroupbutton() {
        qualitybg.add(qexRadioButton);
        qualitybg.add(qvgRadioButton);
        qualitybg.add(qgRadioButton);
        qualitybg.add(qaRadioButton);
        qualitybg.add(qpRadioButton);
    }
    
     private void shelfgroupbutton() {
        shelfbg.add(sleRadioButton);
        shelfbg.add(svgRadioButton);
        shelfbg.add(sgRadioButton);
        shelfbg.add(saRadioButton);
        shelfbg.add(spRadioButton);
    }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : farmerOrganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getEmployee().getName();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[3] = request.getStatus();
            row[4] = request.getCropQty();
            model.addRow(row);
            
        }
    }
    
    public void populateCropTable(){
        
       DefaultTableModel model = (DefaultTableModel)produceTable.getModel();
        
        model.setRowCount(0);
        
        for(Produce produce : produceDirectory.getProduceList()){
            Object[] row = new Object[4];
            row[0] = produce;
            row[1] = produce.getCropQuantity();
            row[2] = produce.getCropPrice();
            //row[3] = userAccount.getUsername();
            row[3] = produce.getFarmerName();
            model.addRow(row);
        }
    }

        void populateRequestRMTable() {
        DefaultTableModel model = (DefaultTableModel) requestRMjTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[5];
            row[0] = request.getMessage();
            row[1] = request.getSender();
            row[2] = request.getReceiver();
            String result = ((ProduceRequest) request).getTestResult();
            row[3] = result == null ? "Waiting" : result;
            row[4] = request.getRawMaterialQty();
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        produceTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cropNameTextField = new javax.swing.JTextField();
        quantityTextField = new javax.swing.JTextField();
        priceTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        requestRMjTable = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        weatherButton = new javax.swing.JButton();
        addCropButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        qexRadioButton = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        sleRadioButton = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        additionalreviewsTextArea = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        svgRadioButton = new javax.swing.JRadioButton();
        qvgRadioButton = new javax.swing.JRadioButton();
        qgRadioButton = new javax.swing.JRadioButton();
        sgRadioButton = new javax.swing.JRadioButton();
        saRadioButton = new javax.swing.JRadioButton();
        qaRadioButton = new javax.swing.JRadioButton();
        qpRadioButton = new javax.swing.JRadioButton();
        spRadioButton = new javax.swing.JRadioButton();
        reviewSupplyButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        workRequestJTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Crop Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        produceTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        produceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Crop Name", "Quantity", "Price", "Farmer"
            }
        ));
        jScrollPane2.setViewportView(produceTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Crop Name");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Quantity");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Price");

        cropNameTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        quantityTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        priceTextField.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        requestRMjTable.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        requestRMjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Sender", "Receiver", "Status", "Raw material Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(requestRMjTable);
        if (requestRMjTable.getColumnModel().getColumnCount() > 0) {
            requestRMjTable.getColumnModel().getColumn(0).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(1).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(2).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(3).setResizable(false);
            requestRMjTable.getColumnModel().getColumn(4).setResizable(false);
        }

        requestTestJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        requestTestJButton.setText("Request Raw Material");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        weatherButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        weatherButton.setText("Weather Information");
        weatherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherButtonActionPerformed(evt);
            }
        });

        addCropButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        addCropButton.setText("Add Produce");
        addCropButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCropButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Review Supply");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Supply Quality");

        qexRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qexRadioButton.setText("Excellent");
        qexRadioButton.setEnabled(false);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Supply Shelf Life");

        sleRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sleRadioButton.setText("Excellent");
        sleRadioButton.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Additional Reviews");

        additionalreviewsTextArea.setColumns(20);
        additionalreviewsTextArea.setRows(5);
        additionalreviewsTextArea.setEnabled(false);
        jScrollPane5.setViewportView(additionalreviewsTextArea);

        submitButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        svgRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        svgRadioButton.setText("Very Good");
        svgRadioButton.setEnabled(false);

        qvgRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qvgRadioButton.setText("Very Good");
        qvgRadioButton.setEnabled(false);
        qvgRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qvgRadioButtonActionPerformed(evt);
            }
        });

        qgRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qgRadioButton.setText("Good");
        qgRadioButton.setEnabled(false);

        sgRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sgRadioButton.setText("Good");
        sgRadioButton.setEnabled(false);

        saRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saRadioButton.setText("Average");
        saRadioButton.setEnabled(false);

        qaRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qaRadioButton.setText("Average");
        qaRadioButton.setEnabled(false);

        qpRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        qpRadioButton.setText("Poor");
        qpRadioButton.setEnabled(false);

        spRadioButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spRadioButton.setText("Poor");
        spRadioButton.setEnabled(false);

        reviewSupplyButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        reviewSupplyButton.setText("Review Raw Material");
        reviewSupplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reviewSupplyButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Farmer-icon.png"))); // NOI18N
        jLabel8.setText("Farmer");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Weather-icon.png"))); // NOI18N
        jLabel9.setText("Weather Updates");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Raw Material Details");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Produce Details");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("Produce Transaction Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(751, 751, 751)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(129, 129, 129)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(refreshJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(assignJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                                    .addComponent(processJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane5))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(43, 43, 43)
                                        .addComponent(qexRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(svgRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(sgRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(saRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(spRadioButton)))
                                .addGap(18, 18, 18)
                                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(175, 175, 175)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sleRadioButton, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(115, 115, 115)
                                        .addComponent(qvgRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(qgRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(qaRadioButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(qpRadioButton))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(282, 282, 282)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(39, 39, 39))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                            .addComponent(cropNameTextField)
                            .addComponent(priceTextField))
                        .addGap(159, 159, 159)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addCropButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(requestTestJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reviewSupplyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(weatherButton, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel8)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(assignJButton)
                        .addGap(12, 12, 12)
                        .addComponent(refreshJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processJButton)))
                .addGap(20, 20, 20)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weatherButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cropNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(addCropButton)))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(requestTestJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reviewSupplyButton)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sleRadioButton)
                            .addComponent(qvgRadioButton)
                            .addComponent(qgRadioButton)
                            .addComponent(qaRadioButton)
                            .addComponent(qpRadioButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qexRadioButton)
                    .addComponent(svgRadioButton)
                    .addComponent(sgRadioButton)
                    .addComponent(saRadioButton)
                    .addComponent(spRadioButton)
                    .addComponent(jLabel6))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(submitButton)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();
       // String selectedRM = (String)rmComboBox.getSelectedItem();

        if (selectedRow < 0){
            return;
        }
        
        
        /*int i =0;
        for(int j=0; j<requestRMjTable.getRowCount();j++){
            String valueRMTable = requestRMjTable.getModel().getValueAt(j, i).toString();
            if(!(selectedRM.equalsIgnoreCase(valueRMTable))){
                continue;
            }                         
            else {
                
                break;
                
            }

        }

        JOptionPane.showMessageDialog(null, "can not assign, request for raw material");
  */
        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        String cropName = workRequestJTable.getModel().getValueAt(selectedRow, 0).toString();
        int cropQty = Integer.parseInt((String.valueOf(workRequestJTable.getModel().getValueAt(selectedRow, 4))));
        populateTable();
        if(cropName.equalsIgnoreCase("rice")) if(cropName.equalsIgnoreCase("tomato")){
            JOptionPane.showMessageDialog(null, "The amount of pesticides required for rice of quality pest A is" + (cropQty*2) + 
                    "The amount of pesticides required for rice of quality pest B is" + (cropQty/2)+ "The amount of pesticides required for rice of quality pest A is" +(cropQty*1.5));
        }
        
        
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        ProduceRequest request = (ProduceRequest)workRequestJTable.getValueAt(selectedRow, 0);
     
        request.setStatus("Processing");
        
        ProcessProduceRequestJPanel processWorkRequestJPanel = new ProcessProduceRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("ProcessProduceJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("RequestProduceJPanel", new RequestRawMaterialJPanel(userProcessContainer, userAccount, enterprise,produceDirectory));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void weatherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherButtonActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("WeatherInformationJPanel", new WeatherInformationJPanel (userProcessContainer));
        layout.next(userProcessContainer);
    }//GEN-LAST:event_weatherButtonActionPerformed

    private void addCropButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCropButtonActionPerformed
        // TODO add your handling code here:
        try 
        {
        if(cropNameTextField.getText().equals("") || quantityTextField.getText().equals("") || priceTextField.getText().equals(""))
            JOptionPane.showMessageDialog(null,"Please fill all the details");
         else if (checkIfCropExists(cropNameTextField.getText()))
        {
            Produce produce =  produceDirectory.addProduce();
            produce.setCropName(cropNameTextField.getText());
            produce.setCropPrice(Double.parseDouble(priceTextField.getText()));
            produce.setCropQuantity(Integer.parseInt(quantityTextField.getText()));
            produce.setFarmerName(userAccount.getUsername());
            populateCropTable();
        }
        else {
             String tempName = null;   
             int cropQty = Integer.parseInt(quantityTextField.getText());
             int i = 0;
             String cropName = cropNameTextField.getText();
             for(int j = 0; j <produceTable.getRowCount(); j++){
             tempName = produceTable.getModel().getValueAt(j, i).toString();
             
             if(tempName.equalsIgnoreCase(cropName)){
                i++;
               
                cropQty = Integer.parseInt((String.valueOf(produceTable.getModel().getValueAt(j, i)))) + cropQty;
                 //System.out.println("New qunty" +cropQty);
                
                for (Produce prod : produceDirectory.getProduceList())
                {
                    if (prod.getCropName().equalsIgnoreCase(cropName))
                     prod.setCropQuantity(cropQty);
                }
                break;
            }
        }
             populateCropTable();
            }
        }
        catch(NumberFormatException e)
            {
                JOptionPane.showMessageDialog(null,"Please enter a number in Quantity  and price");
            }
    }//GEN-LAST:event_addCropButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        // TODO add your handling code here:

        int selectedRow = requestRMjTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }

        String status = requestRMjTable.getValueAt(selectedRow, 3).toString();
        String supplyName = requestRMjTable.getValueAt(selectedRow, 0).toString();
        String supplierName = requestRMjTable.getValueAt(selectedRow, 2).toString();

        //ProduceReview pr = prDirectory.addProduceReview();
        if(status.equalsIgnoreCase("done")){
            RawMaterialReview rmr = rmrDirectory.addRawMaterialReview();
            rmr.setSupplyName(supplyName);
           rmr.setSupplierName(supplierName);

            String quality = null;
            if(qexRadioButton.isSelected())
            quality = "Excellent";
            else if (qvgRadioButton.isSelected())
            quality = "Very Good";
            else if (qgRadioButton.isSelected())
            quality = "Good";
            else if (qaRadioButton.isSelected())
            quality = "Average";
            else if(qpRadioButton.isSelected())
            quality = "Poor";

            String shelfLife = null;

            if(sleRadioButton.isSelected())
            shelfLife = "Excellent";
            else if (svgRadioButton.isSelected())
            shelfLife = "Very Good";
            else if (sgRadioButton.isSelected())
            shelfLife = "Good";
            else if (saRadioButton.isSelected())
            shelfLife = "Average";
            else if(spRadioButton.isSelected())
            shelfLife = "Poor";

            rmr.setProduceQuality(quality);
            rmr.setProduceShelfLife(shelfLife);
            rmr.setAdditionalReviews(additionalreviewsTextArea.getText());
        }

        qexRadioButton.setEnabled(false);
        qvgRadioButton.setEnabled(false);
        qgRadioButton.setEnabled(false);
        qaRadioButton.setEnabled(false);
        qpRadioButton.setEnabled(false);

        sleRadioButton.setEnabled(false);
        svgRadioButton.setEnabled(false);
        sgRadioButton.setEnabled(false);
        saRadioButton.setEnabled(false);
        spRadioButton.setEnabled(false);

        additionalreviewsTextArea.setEnabled(false);

        qualitybg.clearSelection();
        shelfbg.clearSelection();

        additionalreviewsTextArea.setText(" ");
    }//GEN-LAST:event_submitButtonActionPerformed

    private void qvgRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qvgRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qvgRadioButtonActionPerformed

    private void reviewSupplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reviewSupplyButtonActionPerformed
        // TODO add your handling code here:
         int selectedRow = requestRMjTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
       
       String status = requestRMjTable.getValueAt(selectedRow, 3).toString();
       
       if(status.equalsIgnoreCase("done")){

            
           
            qexRadioButton.setEnabled(true);
            qvgRadioButton.setEnabled(true);
            qgRadioButton.setEnabled(true);
            qaRadioButton.setEnabled(true);
            qpRadioButton.setEnabled(true);

            sleRadioButton.setEnabled(true);
            svgRadioButton.setEnabled(true);
            sgRadioButton.setEnabled(true);
            saRadioButton.setEnabled(true);
            spRadioButton.setEnabled(true);
            
            additionalreviewsTextArea.setEnabled(true);
        
       }
       else{
           JOptionPane.showMessageDialog(null, "Request not fulfilled");
       }
        
    }//GEN-LAST:event_reviewSupplyButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCropButton;
    private javax.swing.JTextArea additionalreviewsTextArea;
    private javax.swing.JButton assignJButton;
    private javax.swing.JTextField cropNameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextField priceTextField;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable produceTable;
    private javax.swing.JRadioButton qaRadioButton;
    private javax.swing.JRadioButton qexRadioButton;
    private javax.swing.JRadioButton qgRadioButton;
    private javax.swing.JRadioButton qpRadioButton;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JRadioButton qvgRadioButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable requestRMjTable;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JButton reviewSupplyButton;
    private javax.swing.JRadioButton saRadioButton;
    private javax.swing.JRadioButton sgRadioButton;
    private javax.swing.JRadioButton sleRadioButton;
    private javax.swing.JRadioButton spRadioButton;
    private javax.swing.JButton submitButton;
    private javax.swing.JRadioButton svgRadioButton;
    private javax.swing.JButton weatherButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private boolean checkIfCropExists(String text) {
         boolean flag = true;
        for (Produce produce: produceDirectory.getProduceList()){
            String temp = produce.getCropName();
            if(temp == null)
            {   
                break;
            }
            else if (temp.equalsIgnoreCase(text))
            {
                flag = false;
                break;
            }
                else
                flag = true;
        } 
        
        return flag;
    }

    private void populatermCombo() {
        /*rmComboBox.addItem("Pest A");
        rmComboBox.addItem("Pest B");
        rmComboBox.addItem("Pest C");
*/

    }

  
}